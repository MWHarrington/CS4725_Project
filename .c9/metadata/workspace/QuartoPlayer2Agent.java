{"changed":true,"filter":false,"title":"QuartoPlayer2Agent.java","tooltip":"/QuartoPlayer2Agent.java","value":"import java.util.*;\nimport java.util.Random;\n\npublic class QuartoPlayer2Agent extends QuartoAgent {\n\n\tprivate static final int NUMBER_OF_BOARD_LINES = 12;\n\tprivate static final int INVALID_CHARACTERISTIC = 2;\n\n\t//Example AI\n\tpublic QuartoPlayer2Agent(GameClient gameClient, String stateFileName) {\n\t\t// because super calls one of the super class constructors(you can overload constructors), you need to pass the parameters required.\n\t\tsuper(gameClient, stateFileName);\n\t}\n\n\t//MAIN METHOD\n\tpublic static void main(String[] args) {\n\t\t//start the server\n\t\tGameClient gameClient = new GameClient();\n\t\t\n\t\tString ip = null;\n\t\tString stateFileName = null;\n\t\t//IP must be specified\n\t\tif(args.length > 0) {\n\t\t\tip = args[0];\n\t\t} else {\n\t\t\tSystem.out.println(\"No IP Specified\");\n\t\t\tSystem.exit(0);\n\t\t}\n\t\tif (args.length > 1) {\n\t\t\tstateFileName = args[1];\n\t\t}\n\t\t\n\t\tgameClient.connectToServer(ip, 4321);\n\t\tQuartoPlayer2Agent quartoAgent = new QuartoPlayer2Agent(gameClient, stateFileName); \n\t\tquartoAgent.play();\n\t\t\n\t\tgameClient.closeConnection();\n\t}\n\n\tprivate boolean checkForWin(QuartoBoard gameBoard, int row, int col, int piece){\n\t\tQuartoBoard copyBoard = new QuartoBoard(gameBoard);\n\t\tcopyBoard.insertPieceOnBoard(row, col, piece);\n\t\tif (copyBoard.checkRow(row) || copyBoard.checkColumn(col) || copyBoard.checkDiagonals()) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t/*\n\t * Do Your work here\n\t * The server expects a move in the form of:   row,column\n\t */\n\t@Override\n\tprotected String moveSelectionAlgorithm(int pieceId) {\n\t\t//If there is a winning move, take it\n\t\tfor(int row = 0; row < this.quartoBoard.getNumberOfRows(); row++) {\n\t\t\tfor(int column = 0; column < this.quartoBoard.getNumberOfColumns(); column++) {\n\t\t\t\tif(this.quartoBoard.getPieceOnPosition(row, column) == null) {\n\t\t\t\t\tif (checkForWin(this.quartoBoard,row,column,pieceId)) {\n\t\t\t\t\t\treturn row + \",\" + column;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn evaluateUtility(this.quartoBoard, pieceId);\n\t}\n\t\n\tprivate String evaluateUtility(QuartoBoard gameBoard, int pieceId) {\n\t\tBoardLine[] boardLines = utility(gameBoard);\n\t\tboolean[] pieceCharacteristics = new QuartoPiece(pieceId).getCharacteristicsArray();\n\t\t\n\t\tint bestUtilityIndex = 0;\n\t\tfor (int line = 0; line < boardLines.length; line++) {\n\t\t\tif (boardLines[line].isValid() && !boardLines[line].getAvailableSpots().isEmpty()) {\n\t\t\t\tfor (int i = 0; i < boardLines[line].getCharacteristics().length; i++) {\n\t\t\t\t\tif (((boardLines[line].getCharacteristics()[i] == 0 && !pieceCharacteristics[i]) || \n\t\t\t\t\t\t\t(boardLines[line].getCharacteristics()[i] == 1 && pieceCharacteristics[i])) && \n\t\t\t\t\t\t\tboardLines[line].getCount() > boardLines[bestUtilityIndex].getCount()) {\n\t\t\t\t\t\tbestUtilityIndex = line;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (boardLines[bestUtilityIndex].getAvailableSpots().isEmpty()) {\n\t\t\tint[] location = gameBoard.chooseRandomPositionNotPlayed(100);\n\t\t\treturn  location[0] + \",\" + location[1];\n\t\t}\n\t\t\n\t\tString bestLocaiton = \"\";\n\t\tint bestUtility = 0;\n\t\tfor (String location : boardLines[bestUtilityIndex].getAvailableSpots()) {\n\t\t\tQuartoBoard copyBoard = new QuartoBoard(this.quartoBoard);\n\t\t\tint row = Integer.parseInt(location.split(\",\")[0]);\n\t\t\tint col = Integer.parseInt(location.split(\",\")[1]);\n\t\t\tcopyBoard.insertPieceOnBoard(row, col, pieceId);\n\t\t\t\n\t\t\tBoardLine[] testLines = utility(copyBoard);\n\t\t\t\n\t\t\tint tempTotal = 0;\n\t\t\t\n\t\t\t//Utitility for row\n\t\t\ttempTotal += testLines[row].getCount();\n\t\t\t\n\t\t\t//Utitility for col\n\t\t\ttempTotal += testLines[col + 5].getCount();\n\t\t\t\n\t\t\t//Utitility for top left to bottom right\n\t\t\tif (row == col){\n\t\t\t\ttempTotal += testLines[10].getCount();\n\t\t\t}\n\t\t\t\n\t\t\t//Utitility for top right to bottom left\n\t\t\tif ((row + col) == 4){\n\t\t\t\ttempTotal += testLines[11].getCount();\n\t\t\t}\n\t\t\t\n\t\t\tif (tempTotal > bestUtility) {\n\t\t\t\tbestUtility = tempTotal;\n\t\t\t\tbestLocaiton = location;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn bestLocaiton;\n\t}\n\t\n\t/*\n\t * This code will try to find a piece that the other player can't make a winning move off of\n\t */\n\t@Override\n\tprotected String pieceSelectionAlgorithm() {\n\t\treturn pieceSelectionAlgorithm(this.quartoBoard);\n\t}\n\t\n\tprivate String pieceSelectionAlgorithm(QuartoBoard gameBoard) {\n\t\t// if (this.playerNumber == 1) {\n\t\t\treturn String.format(\"%5s\", Integer.toBinaryString(findWorstPiece())).replace(' ', '0');\n\t\t// }\n\t\t// return String.format(\"%5s\", Integer.toBinaryString(pickPieceWithUtility(gameBoard))).replace(' ', '0');\n\t}\n\t\n\t/*\n\tprivate int pickPieceWithUtilityHelper(QuartoBoard gameBoard, int[] valueOfCharacteristics, int depth) {\n\t\tint[] chosenPiece = new int[5];\n\t   \n\t\tif (valueOfCharacteristics[0] < valueOfCharacteristics[1]) {\n\t\t\tchosenPiece[0] = 0;\n\t\t} else {\n\t\t\tchosenPiece[0] = 1;\n\t\t}\n\t\t\n\t\tif (valueOfCharacteristics[2] < valueOfCharacteristics[3]) {\n\t\t\tchosenPiece[1] = 0;\n\t\t} else {\n\t\t\tchosenPiece[1] = 1;\n\t\t}\n\t\t\n\t\tif (valueOfCharacteristics[4] < valueOfCharacteristics[5]) {\n\t\t\tchosenPiece[2] = 0;\n\t\t} else {\n\t\t\tchosenPiece[2] = 1;\n\t\t}\n\t\t\n\t\tif (valueOfCharacteristics[6] < valueOfCharacteristics[7]) {\n\t\t\tchosenPiece[3] = 0;\n\t\t} else {\n\t\t\tchosenPiece[3] = 1;\n\t\t}\n\t\t\n\t\tif (valueOfCharacteristics[8] < valueOfCharacteristics[9]) {\n\t\t\tchosenPiece[4] = 0;\n\t\t} else {\n\t\t\tchosenPiece[4] = 1;\n\t\t}\n\t\t\n\t\t// Binary conversion of the array\n\t\tint piece = chosenPiece[0] + \n\t\t\t\t\t(chosenPiece[1] * 2) + \n\t\t\t\t\t(chosenPiece[2] * 4) + \n\t\t\t\t\t(chosenPiece[3] * 8) + \n\t\t\t\t\t(chosenPiece[4] * 16);\n\t \n\t\tboolean skip = false;\n\t\tif (!gameBoard.isPieceOnBoard(piece) && depth != 0) {\n\t\t\tfor (int row = 0; row < gameBoard.getNumberOfRows(); row++) {\n\t\t\t\tfor (int col = 0; col < gameBoard.getNumberOfColumns(); col++) {\n\t\t\t\t\tif (!this.quartoBoard.isSpaceTaken(row, col)) {\n\t\t\t\t\t\tif (checkForWin(gameBoard,row,col,piece)) {\n\t\t\t\t\t\t\tskip = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (skip) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\tif (!skip) {\n\t\t\t\treturn piece;\n\t\t\t}\n\t\t} else if (depth == 0) {\n\t\t\tfor (int i = 0; i < this.quartoBoard.getNumberOfPieces(); i++) {\n\t\t\t\tskip = false;\n\t\t\t\tif (!this.quartoBoard.isPieceOnBoard(i)) {\n\t\t\t\t\tfor (int row = 0; row < this.quartoBoard.getNumberOfRows(); row++) {\n\t\t\t\t\t\tfor (int col = 0; col < this.quartoBoard.getNumberOfColumns(); col++) {\n\t\t\t\t\t\t\tif (!this.quartoBoard.isSpaceTaken(row, col)) {\n\t\t\t\t\t\t\t\tif (checkForWin(gameBoard,row,col,i)) {\n\t\t\t\t\t\t\t\t\tskip = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (skip) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!skip) {\n\t\t\t\t\t\treturn i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//Nothing found just give a random Piece\n\t\t\tint pieceId = this.quartoBoard.chooseRandomPieceNotPlayed(100);\n\t\t\t\n\t\t\treturn pieceId;\n\t\t}\n\t\t\n\t\tint lowestIndex = 0;\n\t\tfor (int i = 0; i < valueOfCharacteristics.length; i++) {\n\t\t\tif (valueOfCharacteristics[i] < valueOfCharacteristics[lowestIndex]) {\n\t\t\t\tlowestIndex = i;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvalueOfCharacteristics[lowestIndex] = valueOfCharacteristics[lowestIndex] * 2 + 1;\n\t\treturn pickPieceWithUtilityHelper(gameBoard, valueOfCharacteristics, --depth);\n\t}\n\t*/\n\tprivate int findWorstPiece() {\n\t\tBoardLine[] boardLines = utility(this.quartoBoard);\n\t\t\n\t\t// Find the worst characteristics\n\t\tint hightestIndex = 0;\n\t\tint[] badCharacteristics = null;\n\t\t\n\t\tfor (int i = 0; i < boardLines.length; i++) {\n\t\t\tif (boardLines[hightestIndex].isValid()) {\n\t\t\t\tif (boardLines[hightestIndex].getCount() < boardLines[i].getCount()) {\n\t\t\t\t\thightestIndex = i;\n\t\t\t\t\tbadCharacteristics = boardLines[hightestIndex].getCharacteristics();\n\t\t\t\t} else if (boardLines[hightestIndex].getCount() == boardLines[i].getCount()) {\n\t\t\t\t\tint[] newCharacteristics = boardLines[i].getCharacteristics();\n\t\t\t\t\tint[] characteristics = boardLines[hightestIndex].getCharacteristics();\n\t\t\t\t\t\n\t\t\t\t\tfor (int j = 0; j < characteristics.length; j++) {\n\t\t\t\t\t\tif (characteristics[j] == 2 && newCharacteristics[j] == 0) {\n\t\t\t\t\t\t\tcharacteristics[j] = 0;\n\t\t\t\t\t\t} else if (characteristics[j] == 2 && newCharacteristics[j] == 1) {\n\t\t\t\t\t\t\tcharacteristics[j] = 1;\n\t\t\t\t\t\t} else if (characteristics[j] != newCharacteristics[j]) {\n\t\t\t\t\t\t\tcharacteristics[j] = 2;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbadCharacteristics = characteristics;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// If no bad characteristics are found, just send back a random piece \n\t\t// that doesn't allow them to win.\n\t\tif (badCharacteristics == null) {\n\t\t\tboolean skip = false;\n\t\t\tfor (int i = 0; i < this.quartoBoard.getNumberOfPieces(); i++) {\n\t\t\t\tskip = false;\n\t\t\t\tif (!this.quartoBoard.isPieceOnBoard(i)) {\n\t\t\t\t\tfor (int row = 0; row < this.quartoBoard.getNumberOfRows(); row++) {\n\t\t\t\t\t\tfor (int col = 0; col < this.quartoBoard.getNumberOfColumns(); col++) {\n\t\t\t\t\t\t\tif (!this.quartoBoard.isSpaceTaken(row, col)) {\n\t\t\t\t\t\t\t\tif (checkForWin(this.quartoBoard,row,col,i)) {\n\t\t\t\t\t\t\t\t\tskip = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (skip) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!skip) {\n\t\t\t\t\t\treturn i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//Nothing found just give a random Piece\n\t\t\tint pieceId = this.quartoBoard.chooseRandomPieceNotPlayed(100);\n\t\t\t\n\t\t\treturn pieceId;\n\t\t}\n\t\t\n\t\t// Flip all for certain characteristics\n\t\tfor (int i = 0; i < badCharacteristics.length; i++) {\n\t\t\tif (badCharacteristics[i] == 1) {\n\t\t\t\tbadCharacteristics[i] = 0;\n\t\t\t} else if (badCharacteristics[i] == 0) {\n\t\t\t\tbadCharacteristics[i] = 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Handle the wildcards (2)\n\t\tint[] worstPiece = handleWildCards(this.quartoBoard, badCharacteristics);\n\t\t\n\t\t// A -1 represents that all the worst pieces have been taken\n\t\tif (worstPiece[0] == -1) {\n\t\t\tSystem.out.println(\"NO GOOD PIECE\");\n\t\t\tboolean skip = false;\n\t\t\tfor (int i = 0; i < this.quartoBoard.getNumberOfPieces(); i++) {\n\t\t\t\tskip = false;\n\t\t\t\tif (!this.quartoBoard.isPieceOnBoard(i)) {\n\t\t\t\t\tfor (int row = 0; row < this.quartoBoard.getNumberOfRows(); row++) {\n\t\t\t\t\t\tfor (int col = 0; col < this.quartoBoard.getNumberOfColumns(); col++) {\n\t\t\t\t\t\t\tif (!this.quartoBoard.isSpaceTaken(row, col)) {\n\t\t\t\t\t\t\t\tif (checkForWin(this.quartoBoard,row,col,i)) {\n\t\t\t\t\t\t\t\t\tskip = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (skip) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\t\t\t\tif (!skip) {\n\t\t\t\t\t\treturn i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//if we don't find a piece in the above code just grab the first random piece\n\t\t\treturn this.quartoBoard.chooseRandomPieceNotPlayed(100);\n\t\t}\n\t\t\n\t\t// Binary conversion of the array\n\t\tint pieceId = worstPiece[0] + \n\t\t\t\t\t(worstPiece[1] * 2) + \n\t\t\t\t\t(worstPiece[2] * 4) + \n\t\t\t\t\t(worstPiece[3] * 8) + \n\t\t\t\t\t(worstPiece[4] * 16);\n\t\treturn pieceId;\n\t}\n\t\n\tprivate int[] handleWildCards(QuartoBoard gameBoard, int[] characteristics) {\n\t\t\n\t\tint[] piece0 = null;\n\t\tint[] piece1 = null;\n\t\tfor(int i = 0; i < characteristics.length; i++) {\n\t\t\tif (characteristics[i] == 2) {\n\t\t\t\tcharacteristics[i] = 0;\n\t\t\t\tpiece0 = handleWildCards(gameBoard, characteristics);\n\t\t\t\t\n\t\t\t\tcharacteristics[i] = 1;\n\t\t\t\tpiece1 = handleWildCards(gameBoard, characteristics);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (piece0 == null || piece1 == null) {\n\t\t\treturn characteristics;\n\t\t}\n\t\t\n\t\tint utility0 = handleWildCardsHelper(gameBoard, piece0);\n\t\tint utility1 = handleWildCardsHelper(gameBoard, piece1);\n\t\t\n\t\tif (utility0 == -1 && utility1 == -1) {\n\t\t\treturn new int[]{-1, -1, -1, -1, -1};\n\t\t} else if (utility0 == -1) {\n\t\t\treturn piece1;\n\t\t} else if (utility1 == -1) {\n\t\t\treturn piece0;\n\t\t} else if (utility0 < utility1) {\n\t\t\treturn piece0;\n\t\t}\n\t\t\n\t\treturn piece1;\n\t}\n\t\n\tprivate int handleWildCardsHelper(QuartoBoard gameBoard, int[] characteristics) {\n\t\t\n\t\tint maxUtility = 0;\n\t\t\n\t\t// Binary conversion of the array\n\t\tint piece = characteristics[0] + \n\t\t\t\t\t(characteristics[1] * 2) + \n\t\t\t\t\t(characteristics[2] * 4) + \n\t\t\t\t\t(characteristics[3] * 8) + \n\t\t\t\t\t(characteristics[4] * 16);\n\t\t\t\t\t\n\t\tif (gameBoard.isPieceOnBoard(piece)){\n\t\t\treturn -1;\n\t\t}\n\n\t\tfor (int row = 0; row < this.quartoBoard.getNumberOfRows(); row++) {\n\t\t\tfor (int col = 0; col < this.quartoBoard.getNumberOfColumns(); col++) {\n\t\t\t\tif (!this.quartoBoard.isSpaceTaken(row, col)) {\n\t\t\t\t\tif (checkForWin(this.quartoBoard,row,col,piece)) {\n\t\t\t\t\t\t//return -1 becasue peice would let opponent win.\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (int row = 0; row < gameBoard.getNumberOfRows(); row++){\n\t\t\tfor (int col = 0; col < gameBoard.getNumberOfColumns(); col++){\n\t\t\t\tQuartoBoard copyBoard = new QuartoBoard(this.quartoBoard);\n\t\t\t\tcopyBoard.insertPieceOnBoard(row, col, piece);\n\t\t\t\t\n\t\t\t\tBoardLine[] testLines = utility(copyBoard);\n\t\t\t\t\n\t\t\t\tint tempTotal = 0;\n\t\t\t\tfor (BoardLine line : testLines) {\n\t\t\t\t\ttempTotal += line.getCount();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (tempTotal > maxUtility) {\n\t\t\t\t\tmaxUtility = tempTotal;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn maxUtility;\n\t}\n\t\n\tprivate BoardLine[] utility(QuartoBoard gameBoard) {\n\t\tBoardLine[] boardLines = new BoardLine[NUMBER_OF_BOARD_LINES];\n\t\t\n\t\tint line = 0;\n\t\t\n\t\t// !----  Rows  ----!\n\t\tfor (int row = 0; row < gameBoard.getNumberOfRows(); row++) {\n\t\t\tint[] lineCharacteristics = null;\n\t\t\tArrayList<String> availableSpots = new ArrayList<String>();\n\t\t\tint count = 0;\n\t\t\t\n\t\t\tfor (int column = 0; column < gameBoard.getNumberOfColumns(); column++) {\n\t\t\t\tQuartoPiece piece = gameBoard.getPieceOnPosition(row, column);\n\t\t\t\tif (piece != null) {\n\t\t\t\t\tif (lineCharacteristics == null) {\n\t\t\t\t\t\tlineCharacteristics = new int[5];\n\t\t\t\t\t\tfor (int i = 0; i < piece.getCharacteristicsArray().length; i++) {\n\t\t\t\t\t\t\tif (piece.getCharacteristicsArray()[i]) {\n\t\t\t\t\t\t\t\tlineCharacteristics[i] = 1;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tlineCharacteristics[i] = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (int i = 0; i < piece.getCharacteristicsArray().length; i++) {\n\t\t\t\t\t\t\tif (piece.getCharacteristicsArray()[i] && lineCharacteristics[i] == 0) {\n\t\t\t\t\t\t\t\tlineCharacteristics[i] = INVALID_CHARACTERISTIC;\n\t\t\t\t\t\t\t} else if (!piece.getCharacteristicsArray()[i] && lineCharacteristics[i] == 1) {\n\t\t\t\t\t\t\t\tlineCharacteristics[i] = INVALID_CHARACTERISTIC;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcount++;\n\t\t\t\t} else {\n\t\t\t\t\tavailableSpots.add(row + \",\" + column);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tboolean valid = false;\n\t\t\tif (lineCharacteristics != null) {\n\t\t\t\tfor (int charac : lineCharacteristics) {\n\t\t\t\t\tif (charac != INVALID_CHARACTERISTIC) {\n\t\t\t\t\t\tvalid = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (valid) {\n\t\t\t\tboardLines[line] = new BoardLine(lineCharacteristics, count, availableSpots);\n\t\t\t} else {\n\t\t\t\tboardLines[line] = new BoardLine(valid); \n\t\t\t}\n\t\t\t\n\t\t\tline++;\n\t\t}\n\t\t\n\t\t// !----  Columns  ----!\n\t\tfor (int column = 0; column < gameBoard.getNumberOfColumns(); column++) {\n\t\t\tint[] lineCharacteristics = null;\n\t\t\tArrayList<String> availableSpots = new ArrayList<String>();\n\t\t\tint count = 0;\n\t\t\t\n\t\t\tfor (int row = 0; row < gameBoard.getNumberOfRows(); row++) {\n\t\t\t\tQuartoPiece piece = gameBoard.getPieceOnPosition(row, column);\n\t\t\t\tif (piece != null) {\n\t\t\t\t\tif (lineCharacteristics == null) {\n\t\t\t\t\t\tlineCharacteristics = new int[5];\n\t\t\t\t\t\tfor (int i = 0; i < piece.getCharacteristicsArray().length; i++) {\n\t\t\t\t\t\t\tif (piece.getCharacteristicsArray()[i]) {\n\t\t\t\t\t\t\t\tlineCharacteristics[i] = 1;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tlineCharacteristics[i] = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (int i = 0; i < piece.getCharacteristicsArray().length; i++) {\n\t\t\t\t\t\t\tif (piece.getCharacteristicsArray()[i] && lineCharacteristics[i] == 0) {\n\t\t\t\t\t\t\t\tlineCharacteristics[i] = INVALID_CHARACTERISTIC;\n\t\t\t\t\t\t\t} else if (!piece.getCharacteristicsArray()[i] && lineCharacteristics[i] == 1) {\n\t\t\t\t\t\t\t\tlineCharacteristics[i] = INVALID_CHARACTERISTIC;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcount++;\n\t\t\t\t} else {\n\t\t\t\t\tavailableSpots.add(row + \",\" + column);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tboolean valid = false;\n\t\t\tif (lineCharacteristics != null) {\n\t\t\t\tfor (int charac : lineCharacteristics) {\n\t\t\t\t\tif (charac != INVALID_CHARACTERISTIC) {\n\t\t\t\t\t\tvalid = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (valid) {\n\t\t\t\tboardLines[line] = new BoardLine(lineCharacteristics, count, availableSpots);\n\t\t\t} else {\n\t\t\t\tboardLines[line] = new BoardLine(valid); \n\t\t\t}\n\t\t\t\n\t\t\tline++;\n\t\t}\n\t\t\n\t\t// !----  Top Left to Bottom Right  ----!\n\t\tint[] lineCharacteristics = null;\n\t\tArrayList<String> availableSpots = new ArrayList<String>();\n\t\tint count = 0;\n\t\t\n\t\tint row = 0;\n\t\tfor (int column = 0; column < gameBoard.getNumberOfColumns(); column++) {\n\t\t\tQuartoPiece piece = gameBoard.getPieceOnPosition(row, column);\n\t\t\tif (piece != null) {\n\t\t\t\tif (lineCharacteristics == null) {\n\t\t\t\t\tlineCharacteristics = new int[5];\n\t\t\t\t\tfor (int i = 0; i < piece.getCharacteristicsArray().length; i++) {\n\t\t\t\t\t\tif (piece.getCharacteristicsArray()[i]) {\n\t\t\t\t\t\t\tlineCharacteristics[i] = 1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlineCharacteristics[i] = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (int i = 0; i < piece.getCharacteristicsArray().length; i++) {\n\t\t\t\t\t\tif (piece.getCharacteristicsArray()[i] && lineCharacteristics[i] == 0) {\n\t\t\t\t\t\t\tlineCharacteristics[i] = INVALID_CHARACTERISTIC;\n\t\t\t\t\t\t} else if (!piece.getCharacteristicsArray()[i] && lineCharacteristics[i] == 1) {\n\t\t\t\t\t\t\tlineCharacteristics[i] = INVALID_CHARACTERISTIC;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcount++;\n\t\t\t} else {\n\t\t\t\tavailableSpots.add(row + \",\" + column);\n\t\t\t}\n\t\t\trow++;\n\t\t}\n\t\t\n\t\tboolean valid = false;\n\t\tif (lineCharacteristics != null) {\n\t\t\tfor (int charac : lineCharacteristics) {\n\t\t\t\tif (charac != INVALID_CHARACTERISTIC) {\n\t\t\t\t\tvalid = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (valid) {\n\t\t\tboardLines[line] = new BoardLine(lineCharacteristics, count, availableSpots);\n\t\t} else {\n\t\t\tboardLines[line] = new BoardLine(valid); \n\t\t}\n\t\t\n\t\tline++;\n\t\t\n\t\t// !----  Top Right to Bottom Left  ----!\n\t\tlineCharacteristics = null;\n\t\tavailableSpots = new ArrayList<String>();\n\t\tcount = 0;\n\t\t\n\t\trow = this.quartoBoard.getNumberOfRows();\n\t\tfor (int column = 0; column < gameBoard.getNumberOfColumns(); column++) {\n\t\t\tQuartoPiece piece = gameBoard.getPieceOnPosition(row, column);\n\t\t\tif (piece != null) {\n\t\t\t\tif (lineCharacteristics == null) {\n\t\t\t\t\tlineCharacteristics = new int[5];\n\t\t\t\t\tfor (int i = 0; i < piece.getCharacteristicsArray().length; i++) {\n\t\t\t\t\t\tif (piece.getCharacteristicsArray()[i]) {\n\t\t\t\t\t\t\tlineCharacteristics[i] = 1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlineCharacteristics[i] = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (int i = 0; i < piece.getCharacteristicsArray().length; i++) {\n\t\t\t\t\t\tif (piece.getCharacteristicsArray()[i] && lineCharacteristics[i] == 0) {\n\t\t\t\t\t\t\tlineCharacteristics[i] = INVALID_CHARACTERISTIC;\n\t\t\t\t\t\t} else if (!piece.getCharacteristicsArray()[i] && lineCharacteristics[i] == 1) {\n\t\t\t\t\t\t\tlineCharacteristics[i] = INVALID_CHARACTERISTIC;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcount++;\n\t\t\t} else {\n\t\t\t\tavailableSpots.add(row + \",\" + column);\n\t\t\t}\n\t\t\t\n\t\t\trow--;\n\t\t}\n\t\t\n\t\tvalid = false;\n\t\tif (lineCharacteristics != null) {\n\t\t\tfor (int charac : lineCharacteristics) {\n\t\t\t\tif (charac != INVALID_CHARACTERISTIC) {\n\t\t\t\t\tvalid = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (valid) {\n\t\t\tboardLines[line] = new BoardLine(lineCharacteristics, count, availableSpots);\n\t\t} else {\n\t\t\tboardLines[line] = new BoardLine(valid); \n\t\t}\n\t\t\n\t\tline++;\n\t\t\n\t\treturn boardLines;\n\t}\n\t\n\t//loop through board and see if the game is in a won state\n\tprivate boolean checkIfGameIsWon() {\n\t\t//loop through rows\n\t\tfor (int i = 0; i < NUMBER_OF_ROWS; i++) {\n\t\t\t//gameIsWon = this.quartoBoard.checkRow(i);\n\t\t\tif (this.quartoBoard.checkRow(i)) {\n\t\t\t\tSystem.out.println(\"Win via row: \" + (i) + \" (zero-indexed)\");\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\t//loop through columns\n\t\tfor (int i = 0; i < NUMBER_OF_COLUMNS; i++) {\n\t\t\t//gameIsWon = this.quartoBoard.checkColumn(i);\n\t\t\tif (this.quartoBoard.checkColumn(i)) {\n\t\t\t\tSystem.out.println(\"Win via column: \" + (i) + \" (zero-indexed)\");\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\t//check Diagonals\n\t\tif (this.quartoBoard.checkDiagonals()) {\n\t\t\tSystem.out.println(\"Win via diagonal\");\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\tprivate int pickPieceWithUtility(QuartoBoard gameBoard) {\n\t\tBoardLine[] boardLines = utility(gameBoard); \n\t\t\n\t\tint[] valueOfCharacteristics = new int[10];\n\t\tint index = 0;\n\t\tfor (BoardLine line : boardLines) {\n\t\t\tif (line.isValid()) {\n\t\t\t\tfor (int i = 0; i < line.getCharacteristics().length; i++) {\n\t\t\t\t\tif (line.getCharacteristics()[i] == 0) {\n\t\t\t\t\t\tvalueOfCharacteristics[index] += line.getCount();\n\t\t\t\t\t} else if (line.characteristics[i] == 1) {\n\t\t\t\t\t\tvalueOfCharacteristics[index+1] += line.getCount();\n\t\t\t\t\t}\n\t\t\t\t\tindex = index + 2;\n\t\t\t\t}\n\t\t\t\tindex = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn pickPieceWithUtilityHelper(gameBoard, valueOfCharacteristics, 64);\n\t}\n\t\n\tprivate class BoardLine {\n\t\tprivate int[] characteristics;\n\t\tprivate int count = 0;\n\t\tprivate ArrayList<String> availableSpots;\n\t\tprivate boolean valid;\n\t\t\n\t\tpublic BoardLine(int[] characteristics, int count, ArrayList<String> availableSpots) {\n\t\t\tthis.characteristics = characteristics;\n\t\t\tthis.count = count*count;\n\t\t\tthis.availableSpots = availableSpots;\n\t\t\tthis.valid = true;\n\t\t}\n\t\t\n\t\tpublic BoardLine(boolean valid) {\n\t\t\tthis.valid = valid;\n\t\t\tthis.availableSpots = new ArrayList<String>();\n\t\t}\n\t\t\n\t\tpublic int[] getCharacteristics() {\n\t\t\treturn this.characteristics;\n\t\t}\n\t\t\n\t\tpublic void setCharacteristics(int[] characteristics) {\n\t\t\tthis.characteristics = characteristics;\n\t\t}\n\t\t\n\t\tpublic int getCount() {\n\t\t\treturn this.count;\n\t\t}\n\t\t\n\t\tpublic ArrayList<String> getAvailableSpots() {\n\t\t\treturn availableSpots;\n\t\t}\n\t\t\n\t\tpublic boolean isValid() {\n\t\t\treturn this.valid;\n\t\t}\n\t\t\n\t\tpublic void setValid(boolean valid) {\n\t\t\tthis.valid = valid;\n\t\t}\n\t}\n\t\n\tprivate class Node {\n\t\tprivate Node parent;\n\t\tprivate ArrayList<Node> children;\n\t\tprivate int utility;\n\t\tprivate QuartoBoard gameBoard;\n\t\tprivate boolean[] pieceCharacteristics;\n\t\tprivate Node bestChild;\n\t\t\n\t\tpublic Node(QuartoBoard gameBoard, boolean[] pieceCharacteristics) {\n\t\t\tthis.parent = null;\n\t\t\tthis.children = new ArrayList<Node>();\n\t\t\tthis.utility = -1;\n\t\t\tthis.gameBoard = gameBoard;\n\t\t\tthis.pieceCharacteristics = pieceCharacteristics;\n\t\t}\n\t\t\n\t\tpublic Node(Node parent, QuartoBoard gameBoard, boolean[] pieceCharacteristics) {\n\t\t\tthis.parent = parent;\n\t\t\tthis.children = new ArrayList<Node>();\n\t\t\tthis.utility = -1;\n\t\t\tthis.gameBoard = gameBoard;\n\t\t\tthis.pieceCharacteristics = pieceCharacteristics;\n\t\t}\n\t\t\n\t\tpublic void setUtility(int utility) {\n\t\t\tthis.utility = utility;\n\t\t}\n\t\t\n\t\tpublic void addChild(Node child) {\n\t\t\tthis.children.add(child);\n\t\t\t\n\t\t\tif(child.getUtility() > this.bestChild.getUtility()) {\n\t\t\t\tthis.bestChild = child;\n\t\t\t}\n\t\t\telse if(child.getUtility() == this.bestChild.getUtility()) {\n\t\t\t\tRandom randomGenerator = new Random();\n\t\t\t\tint randomNumber = randomGenerator.nextInt(2);\n\t\t\t\tif(randomNumber % 2 == 0) {\n\t\t\t\t\tthis.bestChild = child;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic void removeChild(Node child) {\n\t\t\tthis.children.remove(child);\n\t\t}\n\t\t\n\t\tpublic void removeChild(int index) {\n\t\t\tthis.children.remove(index);\n\t\t}\n\t\t\n\t\tpublic Node getChild(Node child) {\n\t\t\tfor (Node n : children) {\n\t\t\t\tif (n.equals(child)) {\n\t\t\t\t\treturn n;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tpublic Node getChild(int index) {\n\t\t\treturn children.get(index);\n\t\t}\n\t\t\n\t\tpublic int getUtility() {\n\t\t\treturn utility;\n\t\t}\n\t\t\n\t\tpublic Node getParent() {\n\t\t\treturn parent;\n\t\t}\n\t\t\n\t\tpublic QuartoBoard getGameBoard() {\n\t\t\treturn gameBoard;\n\t\t}\n\t\t\n\t\tpublic boolean[] getCharacteristics(){\n\t\t\treturn this.pieceCharacteristics;\n\t\t}\n\t}\n}","undoManager":{"mark":-72,"position":100,"stack":[[{"group":"doc","deltas":[{"start":{"row":129,"column":36},"end":{"row":129,"column":38},"action":"insert","lines":["()"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":38},"end":{"row":129,"column":39},"action":"insert","lines":["{"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":39},"end":{"row":131,"column":2},"action":"insert","lines":["","\t\t","\t}"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":37},"end":{"row":129,"column":38},"action":"insert","lines":["Q"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":38},"end":{"row":129,"column":39},"action":"insert","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":39},"end":{"row":129,"column":40},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":40},"end":{"row":129,"column":41},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":37},"end":{"row":129,"column":41},"action":"remove","lines":["Quar"]},{"start":{"row":129,"column":37},"end":{"row":129,"column":48},"action":"insert","lines":["QuartoBoard"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":48},"end":{"row":129,"column":49},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":49},"end":{"row":129,"column":50},"action":"insert","lines":["g"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":50},"end":{"row":129,"column":51},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":51},"end":{"row":129,"column":52},"action":"insert","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":52},"end":{"row":129,"column":53},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":53},"end":{"row":129,"column":54},"action":"insert","lines":["b"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":54},"end":{"row":129,"column":55},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":55},"end":{"row":129,"column":56},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":56},"end":{"row":129,"column":57},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":57},"end":{"row":129,"column":58},"action":"insert","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":57},"end":{"row":129,"column":58},"action":"remove","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":56},"end":{"row":129,"column":57},"action":"remove","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":55},"end":{"row":129,"column":56},"action":"remove","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":54},"end":{"row":129,"column":55},"action":"remove","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":53},"end":{"row":129,"column":54},"action":"remove","lines":["b"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":53},"end":{"row":129,"column":54},"action":"insert","lines":["B"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":54},"end":{"row":129,"column":55},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":55},"end":{"row":129,"column":56},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":56},"end":{"row":129,"column":57},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":57},"end":{"row":129,"column":58},"action":"insert","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":58},"end":{"row":129,"column":59},"action":"insert","lines":[","]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":58},"end":{"row":129,"column":59},"action":"remove","lines":[","]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":0},"end":{"row":132,"column":1},"action":"remove","lines":["\tpublic String evaluateUtilityHelper(QuartoBoard gameBoard){","\t\t","\t}","\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":128,"column":1},"end":{"row":129,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":87,"column":67},"end":{"row":88,"column":0},"action":"insert","lines":["",""]},{"start":{"row":88,"column":0},"end":{"row":88,"column":3},"action":"insert","lines":["\t\t\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":3},"end":{"row":88,"column":4},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":4},"end":{"row":88,"column":5},"action":"insert","lines":["y"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":5},"end":{"row":88,"column":6},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":6},"end":{"row":88,"column":7},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":7},"end":{"row":88,"column":8},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":8},"end":{"row":88,"column":9},"action":"insert","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":9},"end":{"row":88,"column":10},"action":"insert","lines":["."]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":9},"end":{"row":88,"column":10},"action":"remove","lines":["."]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":8},"end":{"row":88,"column":9},"action":"remove","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":7},"end":{"row":88,"column":8},"action":"remove","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":6},"end":{"row":88,"column":7},"action":"remove","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":5},"end":{"row":88,"column":6},"action":"remove","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":4},"end":{"row":88,"column":5},"action":"remove","lines":["y"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":3},"end":{"row":88,"column":4},"action":"remove","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":3},"end":{"row":88,"column":4},"action":"insert","lines":["S"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":4},"end":{"row":88,"column":5},"action":"insert","lines":["y"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":5},"end":{"row":88,"column":6},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":6},"end":{"row":88,"column":7},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":7},"end":{"row":88,"column":8},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":8},"end":{"row":88,"column":9},"action":"insert","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":9},"end":{"row":88,"column":10},"action":"insert","lines":["."]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":10},"end":{"row":88,"column":11},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":11},"end":{"row":88,"column":12},"action":"insert","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":12},"end":{"row":88,"column":13},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":13},"end":{"row":88,"column":14},"action":"insert","lines":["."]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":14},"end":{"row":88,"column":15},"action":"insert","lines":["p"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":15},"end":{"row":88,"column":16},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":16},"end":{"row":88,"column":17},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":17},"end":{"row":88,"column":18},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":18},"end":{"row":88,"column":19},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":19},"end":{"row":88,"column":20},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":20},"end":{"row":88,"column":21},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":21},"end":{"row":88,"column":23},"action":"insert","lines":["()"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":23},"end":{"row":88,"column":24},"action":"insert","lines":[":"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":23},"end":{"row":88,"column":24},"action":"remove","lines":[":"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":23},"end":{"row":88,"column":24},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":22},"end":{"row":88,"column":24},"action":"insert","lines":["\"\""]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":23},"end":{"row":88,"column":24},"action":"insert","lines":["R"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":24},"end":{"row":88,"column":25},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":25},"end":{"row":88,"column":26},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":26},"end":{"row":88,"column":27},"action":"insert","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":27},"end":{"row":88,"column":28},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":28},"end":{"row":88,"column":29},"action":"insert","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":29},"end":{"row":88,"column":30},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":30},"end":{"row":88,"column":31},"action":"insert","lines":["P"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":31},"end":{"row":88,"column":32},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":32},"end":{"row":88,"column":33},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":33},"end":{"row":88,"column":34},"action":"insert","lines":["c"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":34},"end":{"row":88,"column":35},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":35},"end":{"row":88,"column":36},"action":"insert","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":36},"end":{"row":88,"column":37},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":37},"end":{"row":88,"column":38},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":38},"end":{"row":88,"column":39},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":88,"column":0},"end":{"row":88,"column":42},"action":"remove","lines":["\t\t\tSystem.out.println(\"Random Placement\");"]}]}],[{"group":"doc","deltas":[{"start":{"row":87,"column":67},"end":{"row":88,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":138,"column":2},"end":{"row":138,"column":5},"action":"insert","lines":["// "]}]}],[{"group":"doc","deltas":[{"start":{"row":138,"column":2},"end":{"row":138,"column":5},"action":"remove","lines":["// "]}]}],[{"group":"doc","deltas":[{"start":{"row":138,"column":2},"end":{"row":138,"column":5},"action":"insert","lines":["// "]}]}],[{"group":"doc","deltas":[{"start":{"row":140,"column":2},"end":{"row":140,"column":5},"action":"insert","lines":["// "]},{"start":{"row":141,"column":2},"end":{"row":141,"column":5},"action":"insert","lines":["// "]}]}],[{"group":"doc","deltas":[{"start":{"row":143,"column":1},"end":{"row":144,"column":0},"action":"insert","lines":["",""]},{"start":{"row":144,"column":0},"end":{"row":144,"column":1},"action":"insert","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":144,"column":1},"end":{"row":144,"column":2},"action":"insert","lines":["?"]}]}],[{"group":"doc","deltas":[{"start":{"row":144,"column":2},"end":{"row":144,"column":3},"action":"insert","lines":["8"]}]}],[{"group":"doc","deltas":[{"start":{"row":144,"column":2},"end":{"row":144,"column":3},"action":"remove","lines":["8"]}]}],[{"group":"doc","deltas":[{"start":{"row":144,"column":1},"end":{"row":144,"column":2},"action":"remove","lines":["?"]}]}],[{"group":"doc","deltas":[{"start":{"row":144,"column":1},"end":{"row":144,"column":2},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":144,"column":2},"end":{"row":144,"column":3},"action":"insert","lines":["*"]}]}],[{"group":"doc","deltas":[{"start":{"row":242,"column":1},"end":{"row":242,"column":2},"action":"insert","lines":["*"]}]}],[{"group":"doc","deltas":[{"start":{"row":242,"column":2},"end":{"row":242,"column":3},"action":"insert","lines":["/"]}]}]]},"ace":{"folds":[{"start":{"row":144,"column":3},"end":{"row":242,"column":1},"placeholder":"..."}],"scrolltop":2028,"scrollleft":0,"selection":{"start":{"row":262,"column":73},"end":{"row":262,"column":73},"isBackwards":false},"options":{"tabSize":4,"useSoftTabs":false,"guessTabSize":false,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":143,"state":"start","mode":"ace/mode/java"}},"timestamp":1427571731679}